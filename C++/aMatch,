sited;

bool dfs(int a) {
    if (visited[a]) return false;
    visited[a] = true;

    for (int b: adj[a]) {
        if (bMatch[b] == -1) {
            aMatch[a] = b;
            bMatch[b] = a;
            return true;
        }
        else {
            int curPerson = bMatch[b];
            if (dfs(curPerson)) {
                aMatch[a] = b;
                bMatch[b] = a;
                return true;
            }
        }
    }
    return false;
}

int bipartiteMatch() {
    aMatch = vi(n + 1, -1);
    bMatch = vi(n + 1, -1);
    int size = 0;
    for (int start = 1; start < n + 1; ++start) {
        visited = vb(n + 1, false);
        if (dfs(start)) ++size;
    }
    return size;
}

bool canAttach(double tShirt, double collar) {
    bool checkOne = collar * 0.5 <= tShirt && collar <= 0.75 * collar;
    bool checkTwo = collar <= collar && tShirt <= 1.25 * collar;
    if (checkOne || checkTwo) return true;
    return false;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(nullptr); cout.tie(nullptr);

    cin >> n >> m;

    vector<double> tShirts, collars;

    for (int i = 0; i < n; ++i) {
        double tShirt;
        cin >> tShirt;
        tShirts.push_back(tShirt);
    }

    for (int i = 0; i < m; ++i) {
        double collar;
        cin >> collar;
        collars.push_back(collar);
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (canAttach(tShirts[i], collars[j])) {
                adj[i].push_back(j);
            }
        }
    }

    int rst = bipartiteMatch();

    cout << rst << "\n";
    
    return 0;
}

